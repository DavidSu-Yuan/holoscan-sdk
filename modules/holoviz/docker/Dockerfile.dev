# SPDX-FileCopyrightText: Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# **IMPORTANT*** If you change this file, you *must* increment the DEB_VERSION
# file in this directory for the changes to take!!

ARG CUDA_IMAGE

FROM ${CUDA_IMAGE}

ARG TARGET_ARCH

# update the the CUDA signing key
# add the kitware repo for latest cmake
# install dependencies
#  * git, openssh-client: used by cmake to clone git projects
#  * build-essential, cmake: for building
#  * libxrandr-dev, libxxf86vm1, libxinerama-dev, libxcursor-dev, libxi-dev, libxext-dev, libgl-dev: for nvpro_core
RUN . /etc/lsb-release \
    && DISTRIB_ID=$(echo "${DISTRIB_ID}" | sed -e 's/\(.*\)/\L\1/') \
    && DISTRIB_RELEASE=$(echo "${DISTRIB_RELEASE}" | sed -e 's/\.//g') \
    && if [ "${TARGET_ARCH}" = "aarch64" ]; then CUDA_ARCH="sbsa"; else CUDA_ARCH="${TARGET_ARCH}"; fi \
    && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/${DISTRIB_ID}${DISTRIB_RELEASE}/${CUDA_ARCH}/3bf863cc.pub \
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
         ca-certificates wget gnupg2 \
    && wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null \
    && echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null \
    && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        git openssh-client \
        build-essential \
        cmake \
        libxrandr-dev libxxf86vm-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libgl-dev \
    && rm -rf /var/lib/apt/lists/*

# Build the Vulkan SDK from source
# Note there is no arm64 version and the build script always saves the artifacts to the `x86_64` directory, therefore we don't
# use the TARGET_ARCH env variable here
ENV VULKAN_SDK_VERSION=1.3.216.0
RUN apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        libglm-dev cmake libxcb-dri3-0 libxcb-present0 libpciaccess0 \
        libpng-dev libxcb-keysyms1-dev libxcb-dri3-dev libx11-dev g++ gcc \
        libmirclient-dev libwayland-dev libxrandr-dev libxcb-randr0-dev libxcb-ewmh-dev \
        git python python3 bison libx11-xcb-dev liblz4-dev libzstd-dev python3-distutils \
        qt5-default ocaml-core ninja-build pkg-config libxml2-dev wayland-protocols \
    && rm -rf /var/lib/apt/lists/*

RUN cd /tmp \
    && wget --inet4-only -nv --show-progress --progress=dot:giga https://sdk.lunarg.com/sdk/download/${VULKAN_SDK_VERSION}/linux/vulkansdk-linux-x86_64-${VULKAN_SDK_VERSION}.tar.gz \
    && tar -xzf vulkansdk-linux-x86_64-${VULKAN_SDK_VERSION}.tar.gz \
    && rm vulkansdk-linux-x86_64-${VULKAN_SDK_VERSION}.tar.gz \
    && cd ${VULKAN_SDK_VERSION} \
    && rm -rf x86_64 \
    && ./vulkansdk shaderc glslang headers loader \
    && rm -rf source

ENV VULKAN_SDK=/tmp/${VULKAN_SDK_VERSION}/x86_64
ENV PATH="$VULKAN_SDK/bin:${PATH}"

# all devices should be visible
ENV NVIDIA_VISIBLE_DEVICES all
# set 'compute' driver cap to use Cuda
# set 'video' driver cap to use the video encoder
# set 'graphics' driver cap to use OpenGL/EGL/Vulkan
# set 'display' for X11
ENV NVIDIA_DRIVER_CAPABILITIES compute,video,graphics,display
