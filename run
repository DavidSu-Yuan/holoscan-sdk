#!/bin/bash
# SPDX-FileCopyrightText: Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#===============================================================================
# Default values for environment variables.
#===============================================================================

init_globals() {
    if [ "$0" != "/bin/bash" ] && [ "$0" != "bash" ]; then
        SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
        export RUN_SCRIPT_FILE="$(readlink -f "$0")"
    else
        export RUN_SCRIPT_FILE="$(readlink -f "${BASH_SOURCE[0]}")"
    fi

    export TOP=$(git rev-parse --show-toplevel 2> /dev/null || dirname "${RUN_SCRIPT_FILE}")

    # If this repository is dev repository, consider public folder as TOP folder
    if [ -d ${TOP}/public ]; then
        export TOP=${TOP}/public
    fi

    HOLOSCAN_PY_EXE=${HOLOSCAN_PY_EXE:-"python3"}
    export HOLOSCAN_PY_EXE
    HOLOSCAN_DOCKER_EXE=${HOLOSCAN_DOCKER_EXE:-"docker"}
    export HOLOSCAN_DOCKER_EXE

    DO_DRY_RUN="false"  # print commands but do not execute them. Used by run_command
}

################################################################################
# Utility functions
################################################################################


#######################################
# Check if current architecture is x86_64.
#
# Returns:
#   Exit code:
#     0 if $(uname -m) == "x86_64".
#     1 otherwise.
#######################################
checkif_x86_64() {
    if [ $(uname -m) == "x86_64" ]; then
        return 0
    else
        return 1
    fi
}

#######################################
# Check if current architecture is aarch64.
#
# Returns:
#   Exit code:
#     0 if $(uname -m) == "aarch64".
#     1 otherwise.
#######################################
checkif_aarch64() {
    if [ $(uname -m) == "aarch64" ]; then
        return 0
    else
        return 1
    fi
}

#######################################
# Get list of available commands from a given input file.
#
# Available commands and command summary are extracted by checking a pattern
# "_desc() { c_echo '".
# Section title is extracted by checking a pattern "# Section: ".
# This command is used for listing available commands in CLI.
#
# e.g.)
#   "# Section: String/IO functions"
#     => "# String/IO functions"
#   "to_lower_desc() { c_echo 'Convert to lower case"
#     => "to_lower ----------------- Convert to lower case"
#
# Arguments:
#   $1 - input file that defines commands
# Returns:
#   Print list of available commands from $1
#######################################
get_list_of_available_commands() {
    local mode="color"
    if [ "${1:-}" = "color" ]; then
        mode="color"
        shift
    elif [ "${1:-}" = "nocolor" ]; then
        mode="nocolor"
        shift
    fi

    local file_name="$1"
    if [ ! -e "$1" ]; then
        echo "$1 doesn't exist!"
    fi

    local line_str='--------------------------------'
    local IFS= cmd_lines="$(IFS= cat "$1" | grep -E -e "^(([[:alpha:]_[:digit:]]+)_desc\(\)|# Section: )" | sed "s/_desc() *{ *c_echo '/ : /")"
    local line
    while IFS= read -r line; do
        local cmd=$(echo "$line" | cut -d":" -f1)
        local desc=$(echo "$line" | cut -d":" -f2-)
        if [ "$cmd" = "# Section" ]; then
            c_echo ${mode} B "${desc}"
        else
            # there is no substring operation in 'sh' so use 'cut'
            local dash_line="$(echo "${line_str}" | cut -c ${#cmd}-)"  #  = "${line_str:${#cmd}}"
             c_echo ${mode} Y "   ${cmd}" w " ${dash_line} ${desc}"
        fi
        # use <<EOF, not '<<<"$cmd_lines"' to be executable in sh
    done <<EOF
$cmd_lines
EOF
}

my_cat_prefix() {
    local IFS
    local prefix="$1"
    local line
    while IFS= read -r line; do
        echo "${prefix}${line}" # -e option doesn't work in 'sh' so disallow escaped characters
    done <&0
}

c_str() {
    local old_color=39
    local old_attr=0
    local color=39
    local attr=0
    local text=""
    local mode="color"
    if [ "${1:-}" = "color" ]; then
        mode="color"
        shift
    elif [ "${1:-}" = "nocolor" ]; then
        mode="nocolor"
        shift
    fi

    for i in "$@"; do
        case "$i" in
            r|R)
                color=31
                ;;
            g|G)
                color=32
                ;;
            y|Y)
                color=33
                ;;
            b|B)
                color=34
                ;;
            p|P)
                color=35
                ;;
            c|C)
                color=36
                ;;
            w|W)
                color=37
                ;;

            z|Z)
                color=0
                ;;
        esac
        case "$i" in
            l|L|R|G|Y|B|P|C|W)
                attr=1
                ;;
            n|N|r|g|y|b|p|c|w)
                attr=0
                ;;
            z|Z)
                attr=0
                ;;
            *)
                text="${text}$i"
        esac
        if [ "${mode}" = "color" ]; then
            if [ ${old_color} -ne ${color} ] || [ ${old_attr} -ne ${attr} ]; then
                text="${text}\033[${attr};${color}m"
                old_color=$color
                old_attr=$attr
            fi
        fi
    done
    /bin/echo -en "$text"
}

c_echo() {
    # Select color/nocolor based on the first argument
    local mode="color"
    if [ "${1:-}" = "color" ]; then
        mode="color"
        shift
    elif [ "${1:-}" = "nocolor" ]; then
        mode="nocolor"
        shift
    else
        if [ ! -t 1 ]; then
            mode="nocolor"
        fi
    fi

    local old_opt="$(shopt -op xtrace)" # save old xtrace option
    set +x # unset xtrace

    if [ "${mode}" = "color" ]; then
        local text="$(c_str color "$@")"
        /bin/echo -e "$text\033[0m"
    else
        local text="$(c_str nocolor "$@")"
        /bin/echo -e "$text"
    fi
    eval "${old_opt}" # restore old xtrace option
}

echo_err() {
    >&2 echo "$@"
}

c_echo_err() {
    >&2 c_echo "$@"
}

printf_err() {
    >&2 printf "$@"
}

get_unused_ports() {
    local num_of_ports=${1:-1}
    local start=${2:-49152}
    local end=${3:-61000}
    comm -23 \
    <(seq ${start} ${end} | sort) \
    <(ss -tan | awk '{print $4}' | while read line; do echo ${line##*\:}; done | grep '[0-9]\{1,5\}' | sort -u) \
    | shuf | tail -n ${num_of_ports} # use tail instead head to avoid broken pipe in VSCode terminal
}

newline() {
    echo
}

info() {
    c_echo_err W "$(date -u '+%Y-%m-%d %H:%M:%S') [INFO] " Z "$@"
}

error() {
    c_echo_err R "$(date -u '+%Y-%m-%d %H:%M:%S') [ERROR] " Z "$@"
}

fatal() {
    if [ -n "$*" ]; then
        c_echo_err R "$(date -u '+%Y-%m-%d %H:%M:%S') [FATAL] " Z "$@"
        echo_err
    fi
    if [ -n "${SCRIPT_DIR}" ]; then
        exit 1
    else
        kill -INT $$  # kill the current process instead of exit in shell environment.
    fi
}

run_command() {
    local status=0
    local cmd="$*"

    if [ "${DO_DRY_RUN}" != "true" ]; then
        c_echo B "$(date -u '+%Y-%m-%d %H:%M:%S') " W "\$ " G "${cmd}"
    else
        c_echo B "$(date -u '+%Y-%m-%d %H:%M:%S') " C "[dryrun] " W "\$ " G "${cmd}"
    fi

    [ "$(echo -n "$@")" = "" ] && return 1 # return 1 if there is no command available

    if [ "${DO_DRY_RUN}" != "true" ]; then
        "$@"
        status=$?
    fi

    return $status
}

run_docker() {
    $(./run docker_cmd "-u $(id -u):$(id -g)") "$@"
}

#===============================================================================
# Section: Tool
#===============================================================================

install_gxf_desc() { c_echo 'Install GXF in the ${TOP}/.cache/gxf directory

This downloads and extracts the GXF package from NGC into "${TOP}/.cache/gxf".

Environments:
   GXF_TAG: the tag of the GXF package to download
   NGC_CLI_API_KEY: the API key of NGC (see https://ngc.nvidia.com/setup/api-key)
   NGC_CLI_ORG: the organization name of NGC CLI
   NGC_CLI_TEAM: the team name of NGC CLI
'
}
install_gxf() {
    local gxf_tag=${GXF_TAG:-2.4.3-6ff6ffd4}
    local ngc_cli_org=${NGC_CLI_ORG:-nvidia}
    local ngc_cli_team=${NGC_CLI_TEAM:-clara-holoscan}
    local GXF_MODIFIED=false
    local ngc_orgteam_opt=""
    local download_command=ngc

    if [ -n "${NGC_CLI_API_KEY}" ]; then
        ngc_orgteam_opt="--org ${ngc_cli_org} --team ${ngc_cli_team}"
    fi

    mkdir -p ${TOP}/.cache
    pushd ${TOP}/.cache >/dev/null

    # Check if wget or ngc is installed
    if ! command -v ngc > /dev/null; then
      download_command=wget
      if ! command -v wget > /dev/null; then
          fatal R "Please install " W "wget" R " or the " W "ngc" R " command to run install_gxf. Follow the instructions in https://ngc.nvidia.com/setup/installers/cli to install NGC CLI."
      fi
    fi

    if [ ! -f gxf_x86_64_holoscan_sdk_v${gxf_tag}/gxf_*.tar.gz ]; then
        if [ "${download_command}" == "wget" ]; then
            run_command wget --content-disposition https://api.ngc.nvidia.com/v2/resources/nvidia/clara-holoscan/gxf_x86_64_holoscan_sdk/versions/${gxf_tag}/zip -O gxf_x86_64_holoscan_sdk_${gxf_tag}.zip
            if [ $? -ne 0 ]; then
               fatal R "Unable to download " W "${ngc_cli_org}/${ngc_cli_team}/gxf_x86_64_holoscan_sdk:${gxf_tag}" R " Make sure you have access to NGC via your browser."
            fi
            run_command unzip gxf_x86_64_holoscan_sdk_${gxf_tag}.zip -d gxf_x86_64_holoscan_sdk_v${gxf_tag} \
             && run_command rm gxf_x86_64_holoscan_sdk_${gxf_tag}.zip
        else
            run_command ngc registry resource download-version ${ngc_orgteam_opt} "${ngc_cli_org}/${ngc_cli_team}/gxf_x86_64_holoscan_sdk:${gxf_tag}"
            if [ $? -ne 0 ]; then
                fatal R "Unable to download " W "${ngc_cli_org}/${ngc_cli_team}/gxf_x86_64_holoscan_sdk:${gxf_tag}" R ".
    If you are using a private registry, please try to configure NGC CLI ('ngc config set') or change NGC_CLI_API_KEY, NGC_CLI_ORG, and NGC_CLI_TEAM environment variables to the correct API key and organization name/team of NGC CLI." B '
        # configure NGC CLI
        ngc config set

        # Or, export NGC_CLI_API_KEY, NGC_CLI_ORG, and NGC_CLI_TEAM environment variables to the private registry.
        export NGC_CLI_API_KEY=<your-api-key> # see https://ngc.nvidia.com/setup/api-key
        export NGC_CLI_ORG=<ngc-organization>
        export NGC_CLI_TEAM=<ngc-team>'
            fi
        fi
        GXF_MODIFIED=true
    fi
    if [ ! -f gxf_arm64_holoscan_sdk_v${gxf_tag}/gxf_*.tar.gz ]; then
        if [ "${download_command}" == "wget" ]; then
            run_command wget --content-disposition https://api.ngc.nvidia.com/v2/resources/nvidia/clara-holoscan/gxf_arm64_holoscan_sdk/versions/${gxf_tag}/zip -O gxf_arm64_holoscan_sdk_${gxf_tag}.zip
            if [ $? -ne 0 ]; then
               fatal R "Unable to download " W "${ngc_cli_org}/${ngc_cli_team}/gxf_arm64_holoscan_sdk:${gxf_tag}" R " Make sure you have access to NGC via your browser."
            fi
            run_command unzip gxf_arm64_holoscan_sdk_${gxf_tag}.zip -d gxf_arm64_holoscan_sdk_v${gxf_tag} \
             && run_command rm gxf_arm64_holoscan_sdk_${gxf_tag}.zip
        else
            run_command ngc registry resource download-version ${ngc_orgteam_opt} "${ngc_cli_org}/${ngc_cli_team}/gxf_arm64_holoscan_sdk:${gxf_tag}"
            if [ $? -ne 0 ]; then
                fatal R "Unable to download " W "${ngc_cli_org}/${ngc_cli_team}/gxf_arm64_holoscan_sdk:${gxf_tag}" R ".
    If you are using a private registry, please try to configure NGC CLI ('ngc config set') or change NGC_CLI_API_KEY, NGC_CLI_ORG, and NGC_CLI_TEAM environment variables to the correct API key and organization name/team of NGC CLI." B '
        # configure NGC CLI
        ngc config set

        # Or, export NGC_CLI_API_KEY, NGC_CLI_ORG, and NGC_CLI_TEAM environment variables to the private registry.
        export NGC_CLI_API_KEY=<your-api-key> # see https://ngc.nvidia.com/setup/api-key
        export NGC_CLI_ORG=<ngc-organization>
        export NGC_CLI_TEAM=<ngc-team>'
            fi
        fi    
        GXF_MODIFIED=true
    fi

    if [ "${GXF_MODIFIED}" == "true" ] || [ ! -e ${TOP}/.cache/gxf/gxf ]; then
        run_command mkdir -p ${TOP}/.cache/gxf
        run_command rm -rf ${TOP}/.cache/gxf/*

        run_command tar -zxf gxf_x86_64_holoscan_sdk_v${gxf_tag}/gxf_*.tar.gz -C ${TOP}/.cache/gxf --strip-components=1
        run_command tar -zxf gxf_arm64_holoscan_sdk_v${gxf_tag}/gxf_*.tar.gz -C ${TOP}/.cache/gxf --strip-components=1
    else
        c_echo_err W "GXF is already installed"
    fi

    popd >/dev/null

}

#===============================================================================
# Section: Build
#===============================================================================

get_buildtype_str() {
    local build_type="${1:-}"
    local build_type_str

    case "${build_type}" in
        debug|Debug)
            build_type_str="Debug"
            ;;
        release|Release)
            build_type_str="Release"
            ;;
        rel-debug|RelWithDebInfo)
            build_type_str="RelWithDebInfo"
            ;;
        *)
            build_type_str="${CMAKE_BUILD_TYPE:-Release}"
            ;;
    esac

    echo -n "${build_type_str}"
}

get_build_platform_option() {
    local build_opt="${1:-}"

    case "${build_opt}" in
        amd64|x86_64|x86)
            build_opt="--platform linux/amd64"
            ;;
        arm64|aarch64|arm)
            build_opt="--platform linux/arm64"
            ;;
        *)
            if [ -n "${HOLOSCAN_BUILD_PLATFORM}" ]; then
                build_opt="--platform ${HOLOSCAN_BUILD_PLATFORM}"
            else
                build_opt=""
            fi
            ;;
    esac

    echo -n "${build_opt}"
}

clear_cache_desc() { c_echo 'Clear cache folders (including build/install folders)
'
}
clear_cache() {
    c_echo W "Clearing cache..."
    run_command rm -rf ${TOP}/build
    run_command rm -rf ${TOP}/install
    run_command rm -rf ${TOP}/build-debug*
    run_command rm -rf ${TOP}/build-release*
    run_command rm -rf ${TOP}/build-rel-debug*
    run_command rm -rf ${TOP}/install-debug*
    run_command rm -rf ${TOP}/install-release*
    run_command rm -rf ${TOP}/install-rel-debug*

    run_command rm -rf ${TOP}/examples/holoscan-endoscopy-app/build

    run_command rm -rf ${TOP}/.cache/ccache
    run_command rm -rf ${TOP}/.cache/cpm
}

setup_desc() { c_echo 'Setup development environment
'
}
setup() {
    c_echo W "Setup development environment..."

    if ! command -v ${HOLOSCAN_DOCKER_EXE} > /dev/null; then
        fatal G "${HOLOSCAN_DOCKER_EXE}" W " doesn't exists. Please install NVIDIA Docker!"
    fi

    if ! groups | grep -q docker; then
        c_echo_err G "groups" W " doesn't contain 'docker' group. Please add 'docker' group to your user."
        fatal G "groups" W " doesn't contain 'docker' group. Please add 'docker' group to your user." B '
    # Create the docker group.
    sudo groupadd docker
    # Add your user to the docker group.
    sudo usermod -aG docker $USER
    newgrp docker
    docker run hello-world'
    fi

    if checkif_x86_64 && [ -n "${HOLOSCAN_BUILD_PLATFORM}" ] && [ ! -f /proc/sys/fs/binfmt_misc/qemu-aarch64 ]; then
        fatal G "qemu-aarch64" W " doesn't exists. Please install qemu with binfmt-support to run Docker container with aarch64 platform" B '
    # Install the qemu packages
    sudo apt-get install qemu binfmt-support qemu-user-static
    # Execute the registering scripts
    docker run --rm --privileged multiarch/qemu-user-static --reset -p yes'
    fi
}

build_image_desc() { c_echo 'Build dev image
'
}
build_image() {
    local platform=${1:-}
    local build_opts=$(get_build_platform_option "${platform}")
    c_echo W "Using docker build option: '${build_opts}'"

    run_command export DOCKER_BUILDKIT=1
    run_command docker build ${build_opts} -t holoscan-sdk-dev ${TOP}
}

build_desc() { c_echo 'Build (args: one of [debug, release, rel-debug])

This command will build the project.

Export CMAKE_BUILD_PATH (default: "build") to change the build path.
  e.g.,

    export CMAKE_BUILD_PATH=build-arm64

Arguements:
  $1 - CMAKE_BUILD_TYPE (one of ["debug", "release", "rel-debug"])
'
}
build() {
    local buildtype=$(get_buildtype_str $1)
    local build_path="${CMAKE_BUILD_PATH:-build}"
    local prefix="${CMAKE_PREFIX_PATH:-install}"

    setup
    build_image
    install_gxf

    run_command ${HOLOSCAN_DOCKER_EXE} run -it --rm --net=host \
        -u $(id -u):$(id -g) \
        -v ${TOP}:/workspace/holoscan-sdk \
        -e CMAKE_BUILD_TYPE=${buildtype} \
        -e CMAKE_BUILD_PARALLEL_LEVEL=$(nproc) \
        -w /workspace/holoscan-sdk \
        holoscan-sdk-dev \
        bash -c "
            cmake -S . -B ${build_path} \
            && cmake --build ${build_path} \
            && cmake --install ${build_path} --prefix ${prefix} --component holoscan-embedded-core \
            && cmake --install ${build_path} --prefix ${prefix} --component holoscan-embedded-gxf_extensions \
            && cmake --install ${build_path} --prefix ${prefix} --component holoscan-embedded-apps \
            && cmake --install ${build_path} --prefix ${prefix} --component holoscan-embedded-gxf_libs \
            && cmake --install ${build_path} --prefix ${prefix} --component holoscan-embedded-gxf_bins \
            && cmake --install ${build_path} --prefix ${prefix} --component holoscan-embedded-dep_libs
        "
}

#===============================================================================
# Section: Test
#===============================================================================

lint_desc() { c_echo 'Lint code
'
}
lint() {
    c_echo W "Linting code..."
    pushd ${TOP} > /dev/null
    run_command ${HOLOSCAN_PY_EXE} scripts/include_checker.py apps gxf_extensions tests
    popd > /dev/null
}

# test_desc() { c_echo 'Execute test cases

# Arguments:
#   $1 - subcommand [all] (default: all)
#   $2 - test_type [all|unit|integration|system|performance] (default: all)
#   $3 - test_component [all] (default: all)
# '
# }
# test() {
#     local subcommand="${1:-all}"
#     local test_type="${2:-all}"
#     shift;

# }

#===============================================================================
# Section: Launch
#===============================================================================

launch_desc() { c_echo 'Launch Docker container

Export CMAKE_BUILD_PATH (default: "build") to change the build path.
  e.g.,

    export CMAKE_BUILD_PATH=build-arm64

Arguments:
    $1 - Working directory (e.g, "install" => "/workspace/holoscan-sdk/install")
         Default: "build"
'
}
launch() {
    local build_path="${CMAKE_BUILD_PATH:-build}"
    local working_dir=${1:-${build_path}}
    local mount_device_opt=""

    # Skip the first argument to pass the remaining arguments to the docker command.
    if [ -n "$1" ]; then
        shift
    fi

    setup

    # Allow connecting from docker. This is not needed for WSL2 (`SI:localuser:wslg` is added by default)
    run_command xhost +local:docker

    for i in 0 1 2 3; do
        if [ -e /dev/video${i} ]; then
            mount_device_opt+=" --device /dev/video${i}:/dev/video${i}"
        fi
        if [ -e /dev/ajantv2${i} ]; then
            mount_device_opt+=" --device /dev/ajantv2${i}:/dev/ajantv2${i}"
        fi
    done

    c_echo W "Launching (mount_device_opt:" G "${mount_device_opt}" W ")..."

    # Execute with `--runtime=nvidia` to use NVIDIA Docker runtime
    run_command ${HOLOSCAN_DOCKER_EXE} run -it --rm \
        --runtime=nvidia \
        --net=host \
        -u $(id -u):$(id -g) \
        ${mount_device_opt} \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /usr/share/vulkan:/usr/share/vulkan \
        -v ${TOP}/test_data:/workspace/test_data \
        -v ${TOP}:/workspace/holoscan-sdk \
        -e NVIDIA_DRIVER_CAPABILITIES=graphics,video,compute,utility,display \
        -e DISPLAY=$DISPLAY \
        -w /workspace/holoscan-sdk/${working_dir} \
        holoscan-sdk-dev "$@"
}

#===============================================================================
# Section: Example
#===============================================================================

build_example_desc() { c_echo 'Build "examples/holoscan-endoscopy-app"

This command will build the example project.

Export CMAKE_BUILD_PATH (default: "build") to change the build path.
  e.g.,

    export CMAKE_BUILD_PATH=build-arm64

Arguements:
  $1 - CMAKE_BUILD_TYPE (one of ["debug", "release", "rel-debug"])
'
}
build_example() {
    local buildtype=$(get_buildtype_str $1)
    local build_path="${CMAKE_BUILD_PATH:-build}"
    local prefix="${CMAKE_PREFIX_PATH:-install}"

    build ${buildtype}

    run_command ${HOLOSCAN_DOCKER_EXE} run -it --rm --net=host \
        -u $(id -u):$(id -g) \
        -v ${TOP}:/workspace/holoscan-sdk \
        -e CMAKE_BUILD_TYPE=${buildtype} \
        -e CMAKE_BUILD_PARALLEL_LEVEL=$(nproc) \
        -e HOLOSCAN_SDK_PATH=/workspace/holoscan-sdk/install \
        -e GXF_SDK_PATH=/workspace/holoscan-sdk/.cache/gxf \
        -e HOLOSCAN_APP_PATH=/workspace/holoscan-sdk/examples/holoscan-endoscopy-app \
        -w /workspace/holoscan-sdk \
        holoscan-sdk-dev \
        bash -c "
            cd \${HOLOSCAN_APP_PATH} \
            && cmake -S . -B ${build_path} -DHOLOSCAN_SDK_PATH=\${HOLOSCAN_SDK_PATH} -DGXF_SDK_PATH=\${GXF_SDK_PATH} \
            && cmake --build ${build_path}
        "
}

launch_example_desc() { c_echo 'Launch "examples/holoscan-endoscopy-app"

Export CMAKE_BUILD_PATH (default: "build") to change the build path.
  e.g.,

    export CMAKE_BUILD_PATH=build-arm64

Arguments:
    $1 - Working directory (e.g, "install" => "/workspace/holoscan-sdk/install")
         Default: "build"
'
}
launch_example() {
    local build_path="${CMAKE_BUILD_PATH:-build}"
    local working_dir=${1:-${build_path}}
    local mount_device_opt=""

    # Skip the first argument to pass the remaining arguments to the docker command.
    if [ -n "$1" ]; then
        shift
    fi

    setup

    # Allow connecting from docker. This is not needed for WSL2 (`SI:localuser:wslg` is added by default)
    run_command xhost +local:docker

    for i in 0 1 2 3; do
        if [ -e /dev/video${i} ]; then
            mount_device_opt+=" --device /dev/video${i}:/dev/video${i}"
        fi
        if [ -e /dev/ajantv2${i} ]; then
            mount_device_opt+=" --device /dev/ajantv2${i}:/dev/ajantv2${i}"
        fi
    done

    c_echo W "Launching (mount_device_opt:" G "${mount_device_opt}" W ")..."

    # Execute with `--runtime=nvidia` to use NVIDIA Docker runtime
    run_command ${HOLOSCAN_DOCKER_EXE} run -it --rm \
        --runtime=nvidia \
        --net=host \
        -u $(id -u):$(id -g) \
        ${mount_device_opt} \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /usr/share/vulkan:/usr/share/vulkan \
        -v ${TOP}/test_data:/workspace/test_data \
        -v ${TOP}:/workspace/holoscan-sdk \
        -e NVIDIA_DRIVER_CAPABILITIES=graphics,video,compute,utility,display \
        -e DISPLAY=$DISPLAY \
        -e HOLOSCAN_SDK_PATH=/workspace/holoscan-sdk/install \
        -e GXF_SDK_PATH=/workspace/holoscan-sdk/.cache/gxf \
        -e HOLOSCAN_APP_PATH=/workspace/holoscan-sdk/examples/holoscan-endoscopy-app \
        -w /workspace/holoscan-sdk/${working_dir} \
        holoscan-sdk-dev "$@"
}

#===============================================================================

parse_args() {
    local OPTIND
    while getopts 'yh' option;
    do
        case "${option}" in
            y)
                ALWAYS_YES="true"
                ;;
            h)
                print_usage
                if [ -n "${SCRIPT_DIR}" ]; then
                    exit 1
                fi
                ;;
            *)
                ;;
        esac
    done
    shift $((OPTIND-1))

    CMD="$1"
    shift

    ARGS=("$@")
    # Check if the command has `--help`, `-h`, or `--dryrun`, and override the CMD
    local i
    local arg
    local unset_pos
    for i in "${!ARGS[@]}"; do
        arg="${ARGS[i]}"
        if [ "$arg" = "--help" ] || [ "$arg" = "-h" ]; then
            ARGS=("$CMD")
            CMD="help"
            break
        fi
        if [ "$arg" = "--dryrun" ]; then
            unset_pos=$i
            DO_DRY_RUN="true"  # set to true to print commands to screen without running
        fi
    done
    if [ "${unset_pos}" ]; then
        unset 'ARGS[unset_pos]'
    fi
}

print_usage() {
    set +x
    echo_err
    echo_err "USAGE: $0 [command] [arguments]..."
    echo_err ""
    c_echo_err W "Global Arguments"
    c_echo_err "  --help, -h      : Print help messages for [commmand]"
    c_echo_err "  --dryrun        : Print commands to screen without running"
    echo_err
    c_echo_err W "Command List"
    c_echo_err Y "    help  " w "----------------------------  Print detailed description for a given argument (command name)"
    echo_err "$(get_list_of_available_commands color "${RUN_SCRIPT_FILE}" | my_cat_prefix " ")"
    echo_err
}

print_cmd_help_messages() {
    local cmd="$1"
    if [ -n "${cmd}" ]; then
        if type ${cmd}_desc > /dev/null 2>&1; then
            ${cmd}_desc
            exit 0
        else
            c_echo_err R "Command '${cmd}' doesn't exist!"
            exit 1
        fi
    fi
    print_usage
    return 0
}

main() {
    local ret=0
    parse_args "$@"

    case "$CMD" in
        help)
            print_cmd_help_messages "${ARGS[@]}"
            exit 0
            ;;
        ''|main)
            print_usage
            ;;
        *)
            if type ${CMD} > /dev/null 2>&1; then
                "$CMD" "${ARGS[@]}"
            else
                print_usage
                exit 1
            fi
            ;;
    esac
    ret=$?
    if [ -n "${SCRIPT_DIR}" ]; then
        exit $ret
    fi
}

init_globals

if [ -n "${SCRIPT_DIR}" ]; then
    main "$@"
fi

#===============================================================================
# Description template
#===============================================================================
# Globals:
#   HOLOSCAN_OS
#   HOLOSCAN_TARGET
#   HOLOSCAN_USER (used if HOLOSCAN_OS is "linux")
#   HOLOSCAN_HOST (used if HOLOSCAN_OS is "linux")
# Arguments:
#   Command line to execute
# Returns:
#   Outputs print messages during the execution (stdout->stdout, stderr->stderr).
#
#   Note:
#     This command removes "\r" characters from stdout.
#
#   Exit code:
#     exit code returned from executing a given command
